% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/server.R, R/shinyURL.R, R/ui.R
\name{shinyURL.server}
\alias{shinyURL}
\alias{shinyURL.server}
\alias{shinyURL.ui}
\title{Save and restore the view state of a Shiny app}
\usage{
shinyURL.server(session)

shinyURL.ui(label = "Share URL", width = "100\%", copyURL = TRUE,
  tinyURL = TRUE, ZeroClipboard.swf)
}
\arguments{
\item{session}{Typically the same as the optional parameter passed into the
Shiny server function as an argument; if missing defaults to
\code{getDefaultReactiveDomain()}}

\item{label}{Label for the URL field}

\item{width}{The width of the URL text field, e.g. \code{'100\%'}, or 
\code{'400px'}; see \code{\link[shiny]{validateCssUnit}}.}

\item{copyURL}{Include a \sQuote{Copy} button for convenient copying to 
clipboard}

\item{tinyURL}{Use the TinyURL web service for shortening the URL}

\item{ZeroClipboard.swf}{URL of the \dQuote{ZeroClipboard.swf} file, as 
passed to the \sQuote{swfPath} parameter of \sQuote{ZeroClipboard.config}; 
if missing defaults to 
"//cdnjs.cloudflare.com/ajax/libs/zeroclipboard/2.2.0/ZeroClipboard.swf"}
}
\description{
Encode the state of Shiny app's widgets into an URL query string, and use 
parameters from the URL query string to initialize the app.
}
\details{
The \code{shinyURL.server} method contains server logic for encoding
  and restoring the widgets' values. It is called from inside the app's
  server function, and can take the \code{session} objects as argument.

The \code{shinyURL.ui} widget consists of a text field containing an
  URL to the app's current view state.  By default it also features the 
  convenience \sQuote{Copy} button for copying the URL to clipboard, and a 
  \sQuote{TinyURL} button for querying the URL shortening web service.  The 
  inclusion of these buttons is optional and can be controlled by the 
  \code{copyURL} and \code{tinyURL} arguments, respectively.
  
  The \sQuote{Copy} feature uses the ZeroClipboard library, which provides an
  easy way to copy text to the clipboard using an invisible Adobe Flash movie
  and JavaScript. shinyURL includes the JavaScript code to your app 
  automatically, but you also need to have the \dQuote{ZeroClipboard.swf} 
  available to the browser. By default shinyURL uses the file hosted on 
  cdnjs; you can override this by setting the \code{ZeroClipboard.swf} 
  argument to \code{shinyURL.ui}.
}
\section{Quick setup}{
 To start using shinyURL in your Shiny app, follow these
  three steps: \enumerate{ \item Load the package in both 'server.R' an 
  'ui.R': \code{library("shinyURL")} \item Add a call to \code{ 
  shinyURL.server()} inside the server function in 'server.R' \item Add the 
  \code{shinyURL.ui()} widget to 'ui.R'}
}
\examples{
if (interactive()) {
  library("shiny")
  
  ## A Simple Shiny App
   
  shinyApp(
    ui = fluidPage(
      titlePanel("Hello Shiny!"),
      sidebarLayout(
        sidebarPanel(
          sliderInput("bins", "Number of bins:", min = 1, max = 50, value = 30),
          shinyURL.ui()
        ),
        mainPanel(
          plotOutput("plot")
        )
      )
    ),
    server = function(input, output, session) {
      shinyURL.server(session)
      output$plot <- renderPlot({
        x <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)
        hist(x, breaks = bins, col = 'darkgray', border = 'white')
      })
    }
  )

  ## Shiny Widgets Demo
  shinyAppDir( system.file('examples', 'widgets', package='shinyURL') )

  ## Tabsets Demo
  shinyAppDir( system.file('examples', 'tabsets', package='shinyURL') )

}
}
\author{
Andrzej OleÅ› <andrzej.oles@embl.de>
}


% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinyURL.R
\name{shinyURL}
\alias{shinyURL}
\alias{shinyURL.server}
\alias{shinyURL.ui}
\title{Save and restore the state of Shiny app's widgets}
\usage{
shinyURL.server(session)

shinyURL.ui(label = "Share URL", copyURL = TRUE, tinyURL = TRUE)
}
\arguments{
\item{session}{Parameter passed from the Shiny server function}

\item{label}{Label for the URL field}

\item{copyURL}{Include a 'Copy' button for convenient copying to clipboard}

\item{tinyURL}{Use the TinyURL web service for shortening the URL}
}
\description{
Encode the state of Shiny app's widgets into an URL query string, and use
parameters from the URL query string to initialize the applications.
}
\details{
The \code{shinyURL.server} method contains server logic for encoding
  and restoring the widgets' state. It is called from inside the app's server
  function with the \code{session} argument.

The \code{shinyURL.ui} inserts a text field widget containing an URL
  to the app's current view.  By default it also features the convenience
  'Copy' button copying the URL to clipboard, and a 'TinyURL' button querying
  the URL shortening web service.  The inclusion of these buttons is optional
  and can be controlled by the \code{copyURL} and \code{tinyURL} arguments, 
  respectively.
}
\section{Quick setup}{
 To start using shinyURL in your Shiny app, follow these
  three steps: \enumerate{ \item Load the package in both 'server.R' an
  'ui.R': \code{library("shinyURL")} \item Add a call to \code{
  shinyURL.server(session)} inside the 'shinyServer' function in 'server.R', 
  where `session` is the argument passed to the server function. \item Add
  the \code{shinyURL.ui()} widget to 'ui.R'. }
}
\examples{
if (interactive()) {
  library("shiny")
  
  ## A Simple Shiny App
   
  shinyApp(
    ui = fluidPage(
      titlePanel("Hello Shiny!"),
      sidebarLayout(
        sidebarPanel(
          sliderInput("bins", "Number of bins:", min = 1,  max = 50, value = 30),
          shinyURL.ui()
        ),
        mainPanel(
          plotOutput("plot")
        )
      )
    ),
    server = function(input, output, session) {
      shinyURL.server(session)
      output$plot <- renderPlot({
        x <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)
        hist(x, breaks = bins, col = 'darkgray', border = 'white')
      })
    }
  )

  ## Shiny Widgets Demo
  shinyAppDir( system.file('examples', 'widgets', package='shinyURL') )

  ## Tabsets Demo
  shinyAppDir( system.file('examples', 'tabsets', package='shinyURL') )

} 
}
\author{
Andrzej OleÅ› <andrzej.oles@embl.de>
}

